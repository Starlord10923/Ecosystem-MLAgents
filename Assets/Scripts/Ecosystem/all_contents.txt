

--- FILE: Agents\AgentAnimalBase.cs ---
using System.Collections.Generic;
using MEC;
using UnityEngine;

public abstract class AgentAnimalBase : AgentBase
{
    private CoroutineHandle currentConsumption;
    private Collider currentTarget = null;

    protected virtual void OnTriggerEnter(Collider other)
    {
        if (currentConsumption != null || !other.TryGetComponent<SustainedConsumable>(out var target))
            return;

        currentTarget = other;
        currentConsumption = Timing.RunCoroutine(ConsumeOverTime(target, other));
    }

    protected virtual void OnTriggerExit(Collider other)
    {
        if (currentTarget == other)
        {
            StopCurrentConsumption();
        }
    }

    private void StopCurrentConsumption()
    {
        if (currentConsumption.IsRunning)
        {
            Timing.KillCoroutines(currentConsumption);
        }
        currentTarget = null;
    }

    private IEnumerator<float> ConsumeOverTime(SustainedConsumable target, Collider source)
    {
        float elapsed = 0f;

        while (elapsed < target.duration)
        {
            if (target == null)
            {
                StopCurrentConsumption();
                yield break;
            }

            float consumed = Mathf.Min(target.valuePerTick, target.remainingValue);
            if (consumed <= 0f)
            {
                StopCurrentConsumption();
                yield break;
            }

            switch (target.consumableType)
            {
                case SustainedConsumable.Type.Food:
                    if (stats.hunger < 1f)
                    {
                        Eat(consumed, target);
                    }
                    break;

                case SustainedConsumable.Type.Water:
                    if (stats.thirst < 1f)
                    {
                        Drink(consumed, target);
                    }
                    break;

                case SustainedConsumable.Type.Prey:
                    if (this is PredatorAgent predator && predator.stats.hunger < 1f)
                    {
                        if (target.TryGetComponent<PreyAgent>(out var prey))
                            EatAnimal(consumed, target, prey);
                        else
                        {
                            StopCurrentConsumption();
                            yield break;
                        }
                    }
                    break;
            }

            if (target.remainingValue <= 0f && target.consumableType != SustainedConsumable.Type.Prey)
            {
                Destroy(target.gameObject);
                StopCurrentConsumption();
                yield break;
            }

            elapsed += target.tickInterval;
            yield return Timing.WaitForSeconds(target.tickInterval);
        }

        StopCurrentConsumption();
    }

    public override void Die()
    {
        RewardUtility.Instance.AddDeathPenalty(this);
        base.Die();
        StopCurrentConsumption();
    }

    protected void Eat(float amt, SustainedConsumable target)
    {
        stats.Eat(amt);
        RewardUtility.Instance.AddNutritionReward(this, amt);
        target.Consume(amt);
    }

    protected void EatAnimal(float amt, SustainedConsumable target, PreyAgent prey)
    {
        prey.stats.TakeDamage(amt);
        stats.Eat(amt);
        RewardUtility.Instance.AddPredationReward(this, amt);
        target.Consume(amt);
    }

    protected void Drink(float amt, SustainedConsumable target)
    {
        stats.Drink(amt);
        RewardUtility.Instance.AddWaterReward(this, amt);
        target.Consume(amt);
    }

    public override void UpdateSize()
    {
        if (transform.localScale.y != stats.CurrentSize)
        {
            transform.localScale = Vector3.one * stats.CurrentSize;
        }
    }
}


--- FILE: Agents\AgentBase.cs ---
using Unity.MLAgents;
using UnityEngine;

[RequireComponent(typeof(Rigidbody))]
public class AgentBase : Agent
{
    protected Rigidbody rb;
    protected Vector2 currentMove;
    protected float brake;
    public AgentStats stats;
    public float maxSpeed;
    [SerializeField] AnimalBar animalBar;

    protected virtual void Awake()
    {
        rb = GetComponent<Rigidbody>();
        animalBar = GetComponentInChildren<AnimalBar>();
    }

    public virtual void InitializeStats(AgentStats inherited = null)
    {
        stats = inherited ?? new AgentStats(Random.Range(2f, 4f), Random.Range(1.5f, 2.5f), Random.Range(8f, 12f));
        maxSpeed = stats.speed;
        transform.localScale = Vector3.one * stats.CurrentSize;
    }

    public virtual void FixedUpdate()
    {
        stats.TickDecay(Time.fixedDeltaTime);

        if (!stats.IsAlive)
        {
            Die();
            return;
        }

        RewardUtility.Instance.AddDecayPenalty(this, stats.hunger, stats.thirst);

        Vector3 moveDir = transform.TransformDirection(new Vector3(currentMove.x, 0, currentMove.y));
        Vector3 desiredVel = (1f - brake) * maxSpeed * moveDir.normalized;

        if (Physics.Raycast(transform.position, Vector3.down, 1.1f, LayerMask.GetMask("Ground")))
        {
            rb.velocity = new Vector3(desiredVel.x, 0f, desiredVel.z);

            if (moveDir != Vector3.zero)
            {
                Quaternion targetRot = Quaternion.LookRotation(moveDir);
                transform.rotation = Quaternion.Slerp(transform.rotation, targetRot, 10f * Time.fixedDeltaTime);
            }
        }

        UpdateSize();
    }

    public virtual void UpdateSize() { }
    public virtual void Die() { }
}


--- FILE: Agents\AgentStats.cs ---
using UnityEngine;

[System.Serializable]
public class AgentStats
{
    public float hunger = 1f;
    public float thirst = 1f;
    public float health = 1f;

    public float speed;
    public float sightRange;
    public float maxSize;

    public float hungerDecayRate = 0.005f;
    public float thirstDecayRate = 0.0075f;
    public float healthDecayRate = 0.005f;
    public float healthRegenRate = 0.01f;

    public float lifetime = 60f;
    public float growthTime = 20f;
    public float age = 0f;

    public float hungerPauseUntil = 0f;
    public float thirstPauseUntil = 0f;

    public float CurrentSize => Mathf.Lerp(1f, maxSize, Mathf.Clamp01(age / growthTime));
    public bool IsAdult => age >= growthTime;
    public bool IsAlive => hunger > 0f && thirst > 0f && health > 0f && age < lifetime;

    public AgentStats() { }

    public AgentStats(float speed, float maxSize, float sightRange)
    {
        this.speed = speed;
        this.maxSize = maxSize;
        this.sightRange = sightRange;
    }

    public void TickDecay(float dt)
    {
        age += dt;

        if (Time.time >= hungerPauseUntil)
            hunger -= hungerDecayRate * dt;

        if (Time.time >= thirstPauseUntil)
            thirst -= thirstDecayRate * dt;

        hunger = Mathf.Clamp01(hunger);
        thirst = Mathf.Clamp01(thirst);

        // Health logic
        if (hunger < 0.3f || thirst < 0.3f)
        {
            health -= healthDecayRate * dt;
        }
        else if (hunger >= 0.5f || thirst >= 0.5f)
        {
            health += healthRegenRate * dt;
        }
        // else do nothing (health stays same)

        health = Mathf.Clamp01(health);
    }


    public void Eat(float amount)
    {
        hunger = Mathf.Clamp01(hunger + amount);
        hungerPauseUntil = Time.time + 2f;
    }

    public void Drink(float amount)
    {
        thirst = Mathf.Clamp01(thirst + amount);
        thirstPauseUntil = Time.time + 2f;
    }

    public void TakeDamage(float amount)
    {
        health = Mathf.Clamp01(health - amount);
    }

    public bool CanMate => IsAdult && hunger >= 0.7f && thirst >= 0.7f;
}


--- FILE: Agents\PredatorAgent.cs ---
using Unity.MLAgents.Actuators;
using UnityEngine;

public class PredatorAgent : AgentAnimalBase
{
    public override void OnEpisodeBegin()
    {
        InitializeStats();
        transform.position = EcosystemManager.Instance.GetSpawnPosition();
        rb.velocity = Vector3.zero;
    }

    public override void CollectObservations(Unity.MLAgents.Sensors.VectorSensor sensor)
    {
        sensor.AddObservation(stats.hunger);
        sensor.AddObservation(stats.thirst);
        sensor.AddObservation(stats.CanMate ? 1f : 0f);
        sensor.AddObservation(stats.CurrentSize / 3f);
        sensor.AddObservation(stats.maxSize / 3f);
        sensor.AddObservation(stats.speed / 5f);
    }

    public override void OnActionReceived(ActionBuffers actions)
    {
        currentMove = new Vector2(actions.ContinuousActions[0], actions.ContinuousActions[1]);
        brake = Mathf.Clamp01(actions.DiscreteActions[0]);
    }

    public override void Die()
    {
        base.Die();
        EcosystemManager.Instance.Remove(gameObject);
        EndEpisode();
    }
}


--- FILE: Agents\PreyAgent.cs ---
using Unity.MLAgents.Actuators;
using UnityEngine;

public class PreyAgent : AgentAnimalBase
{
    private SustainedConsumable sustainedConsumable;
    protected override void Awake()
    {
        base.Awake();
        sustainedConsumable = GetComponent<SustainedConsumable>();
    }

    public override void OnEpisodeBegin()
    {
        InitializeStats();
        transform.position = EcosystemManager.Instance.GetSpawnPosition();
        rb.velocity = Vector3.zero;
    }

    public override void CollectObservations(Unity.MLAgents.Sensors.VectorSensor sensor)
    {
        sensor.AddObservation(stats.hunger);
        sensor.AddObservation(stats.thirst);
        sensor.AddObservation(stats.CanMate ? 1f : 0f);
        sensor.AddObservation(stats.CurrentSize / 3f);
        sensor.AddObservation(stats.maxSize / 3f);
        sensor.AddObservation(stats.speed / 5f);
    }

    public override void OnActionReceived(ActionBuffers actions)
    {
        currentMove = new Vector2(actions.ContinuousActions[0], actions.ContinuousActions[1]);
        brake = Mathf.Clamp01(actions.DiscreteActions[0]);
    }

    public override void UpdateSize()
    {
        if (transform.localScale.y != stats.CurrentSize)
        {
            transform.localScale = Vector3.one * stats.CurrentSize;
            if (this is PreyAgent)
            {
                GetComponent<SustainedConsumable>().UpdateFromSize(stats.CurrentSize);
            }
        }
    }
    
    public override void Die()
    {
        base.Die();
        EcosystemManager.Instance.Remove(gameObject);
        EndEpisode();
    }
}


--- FILE: Environment\AnimalBar.cs ---
using UnityEngine;
using UnityEngine.UI;

public class AnimalBar : MonoBehaviour
{
    [Header("Stats Source")]
    public AgentStats stats;

    [Header("UI References")]
    [SerializeField] private Image hungerBar;
    [SerializeField] private Image thirstBar;
    [SerializeField] private Image healthBar;
    [SerializeField] private GameObject matingIcon;

    [Header("Smoothing")]
    [Range(1f, 20f)] public float lerpSpeed = 10f;

    private float hungerTarget, thirstTarget, healthTarget;

    private void Update()
    {
        if (stats == null) return;

        // Update target values
        hungerTarget = Mathf.Clamp01(stats.hunger);
        thirstTarget = Mathf.Clamp01(stats.thirst);
        healthTarget = Mathf.Clamp01(stats.health);

        // Smooth fill transitions
        if (hungerBar) hungerBar.fillAmount = Mathf.Lerp(hungerBar.fillAmount, hungerTarget, Time.deltaTime * lerpSpeed);
        if (thirstBar) thirstBar.fillAmount = Mathf.Lerp(thirstBar.fillAmount, thirstTarget, Time.deltaTime * lerpSpeed);
        if (healthBar) healthBar.fillAmount = Mathf.Lerp(healthBar.fillAmount, healthTarget, Time.deltaTime * lerpSpeed);

        // Show or hide mating icon
        if (matingIcon != null)
            matingIcon.SetActive(stats.CanMate);
    }

    public void SetStats(AgentStats newStats) => stats = newStats;
}


--- FILE: Environment\EcosystemManager.cs ---
using UnityEngine;

public class EcosystemManager : Singleton<EcosystemManager>
{
    public GameObject preyPrefab, predatorPrefab;
    public Vector2 bounds = new(20, 20);

    public Vector3 GetSpawnPosition()
    {
        return new Vector3(Random.Range(-bounds.x, bounds.x), 0.5f, Random.Range(-bounds.y, bounds.y));
    }

    public void Remove(GameObject agent) => Destroy(agent);
}


--- FILE: Environment\ResourceBar.cs ---
using UnityEngine;
using UnityEngine.UI;

public class ResourceBar : MonoBehaviour
{
    [SerializeField] private Image barImage;
    [Range(1f, 20f)] public float lerpSpeed = 10f;

    private float target = 1f;

    public void SetTargetFill(float value)
    {
        target = Mathf.Clamp01(value);
    }

    private void Update()
    {
        if (Mathf.Abs(barImage.fillAmount - target) > 0.001f)
        {
            barImage.fillAmount = Mathf.Lerp(barImage.fillAmount, target, Time.deltaTime * lerpSpeed);
        }
    }
}


--- FILE: Environment\SpawnerManager.cs ---
using System.Collections.Generic;
using UnityEngine;

public class SpawnerManager : MonoBehaviour
{
    [Header("Prefabs")]
    public List<GameObject> preyPrefabs;
    public List<GameObject> predatorPrefabs;
    public List<GameObject> foodPrefabs;
    public GameObject waterPrefab;

    [Header("Environment Bounds")]
    public float spawnRadius = 20f;

    [Header("Spawn Settings")]
    public int initialPrey = 10;
    public int initialPredators = 5;
    public int initialFood = 20;
    public int initialWater = 10;


    public bool spawnPrey = true;
    public bool spawnPredators = false;

    void Start()
    {
        if (spawnPrey)
            Spawn(preyPrefabs, initialPrey, "Prey");
        if (spawnPredators)
            Spawn(predatorPrefabs, initialPredators, "Predators");
        Spawn(foodPrefabs, initialFood, "Food");
        Spawn(waterPrefab, initialWater, "Water");
    }

    void Spawn(List<GameObject> prefabs, int count, string type)
    {
        if (prefabs.Count == 0 || count <= 0)
        {
            Debug.LogWarning("No prefabs to spawn.");
            return;
        }

        Transform parent = new GameObject($"Spawned-{type}").transform;

        for (int i = 0; i < count; i++)
        {
            Vector3 pos = RandomSpawnPosition();
            int index = Random.Range(0, prefabs.Count);
            Instantiate(prefabs[index], pos, Quaternion.identity, parent);
        }
    }

    void Spawn(GameObject prefab, int count, string type)
    {
        if (prefab == null || count <= 0)
        {
            Debug.LogWarning("No prefab to spawn.");
            return;
        }

        Transform parent = new GameObject($"Spawned-{type}").transform;

        for (int i = 0; i < count; i++)
        {
            Vector3 pos = RandomSpawnPosition();
            Instantiate(prefab, pos, Quaternion.identity, parent);
        }
    }

    Vector3 RandomSpawnPosition()
    {
        float x = Random.Range(-spawnRadius, spawnRadius);
        float z = Random.Range(-spawnRadius, spawnRadius);
        return new Vector3(x, 0.5f, z);
    }
}


--- FILE: Environment\SustainedConsumable.cs ---
using UnityEngine;

[DisallowMultipleComponent]
public class SustainedConsumable : MonoBehaviour
{
    public enum Type { Food, Water, Prey }

    [Header("Consumption Type")]
    public Type consumableType;

    [Header("Value Settings")]
    public float totalValue = 3f;
    public float remainingValue;
    public float tickInterval = 0.2f;

    [Header("Timing")]
    public float duration = 1f;

    [HideInInspector] public float valuePerTick;
    [HideInInspector] public int totalTicks;

    [SerializeField] private ResourceBar resourceBar;

    private void Awake()
    {
        InitializeValues();
        resourceBar = GetComponentInChildren<ResourceBar>();
    }

    public void InitializeValues()
    {
        remainingValue = totalValue;
        if (tickInterval <= 0.01f) tickInterval = 0.2f;
        if (duration <= 0f) duration = 1f;

        totalTicks = Mathf.Max(1, Mathf.RoundToInt(duration / tickInterval));
        valuePerTick = totalValue / totalTicks;

        if (consumableType == Type.Prey)
        {
            duration = 2f;
            if (TryGetComponent<PreyAgent>(out var sc))
            {
                float biomass = sc.stats.CurrentSize;
                totalValue = Mathf.Clamp(biomass, 1f, 5f);
                duration = biomass * 2f;
            }
        }
    }

    public void UpdateFromSize(float newBiomass)
    {
        if (consumableType != Type.Prey) return;

        float clampedBiomass = Mathf.Clamp(newBiomass, 1f, 5f);
        float previousTotal = totalValue;
        float consumedFraction = 1f - (remainingValue / previousTotal);

        totalValue = clampedBiomass;
        duration = clampedBiomass * 2f;

        totalTicks = Mathf.Max(1, Mathf.RoundToInt(duration / tickInterval));
        valuePerTick = totalValue / totalTicks;

        remainingValue = totalValue * (1f - consumedFraction);
    }

    /// <summary>
    /// Consume a fixed amount. Returns how much was actually consumed.
    /// </summary>
    public float Consume(float amount)
    {
        float consumed = Mathf.Min(amount, remainingValue);
        if (consumed <= 0f) return 0f;

        remainingValue = Mathf.Max(0f, consumed);

        // Notify bar if available
        resourceBar.SetTargetFill(remainingValue / totalValue);

        return consumed;
    }
}

--- FILE: Utilities\GeneticUtility.cs ---
using UnityEngine;

public static class GeneticUtility
{
    public static float Blend(float a, float b, float mutationRange = 0.05f)
    {
        float baseValue = Mathf.Lerp(a, b, Random.value);
        return baseValue + Random.Range(-mutationRange, mutationRange);
    }

    public static AgentStats Inherit(AgentStats p1, AgentStats p2)
    {
        return new AgentStats(
            Blend(p1.speed, p2.speed),
            Blend(p1.maxSize, p2.maxSize),
            Blend(p1.sightRange, p2.sightRange)
        );
    }
}


--- FILE: Utilities\RewardUtility.cs ---
using Unity.MLAgents;

public class RewardUtility : Singleton<RewardUtility>
{
    /// <summary>Reward for consuming food. Baseline: +0.2 for 0.1 units.</summary>
    public void AddNutritionReward(Agent agent, float amount)
    {
        float scaled = 0.2f * amount / 0.1f;
        agent.AddReward(scaled);
    }

    /// <summary>Reward for drinking water. Baseline: +0.2 for 0.1 units.</summary>
    public void AddWaterReward(Agent agent, float amount)
    {
        float scaled = 0.2f * amount / 0.1f;
        agent.AddReward(scaled);
    }

    /// <summary>Reward for predator consuming prey. Baseline: +1.0 for 0.6 units.</summary>
    public void AddPredationReward(Agent agent, float amount)
    {
        float scaled = 1.0f * amount / 0.6f;
        agent.AddReward(scaled);
    }

    /// <summary>Negative reward for being hungry or thirsty each frame. Penalty scales with deficiency.</summary>
    public void AddDecayPenalty(Agent agent, float hunger, float thirst)
    {
        float penalty = 0f;

        penalty += ComputePenalty(hunger);
        penalty += ComputePenalty(thirst);

        agent.AddReward(penalty * UnityEngine.Time.fixedDeltaTime);
    }

    /// <summary>Flat death penalty. Called once on death.</summary>
    public void AddDeathPenalty(Agent agent)
    {
        agent.AddReward(-1f);
    }

    /// <summary>Custom reward value for debugging or sparse events.</summary>
    public void AddCustom(Agent agent, float value)
    {
        agent.AddReward(value);
    }

    private float ComputePenalty(float value)
    {
        if (value >= 0.7f) return 0f;
        if (value >= 0.3f) return -0.0025f * ((0.7f - value) / 0.1f);
        return -0.01f * ((0.3f - value) / 0.1f);
    }
}
